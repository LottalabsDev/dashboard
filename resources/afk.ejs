<!-- Content -->
<script>
  let session = 0;
  let afkTime = 0;
  let ws;

  function connect() {
    ws = new WebSocket(`${window.location.href.startsWith("https://") ? "wss" : "ws"}://${window.location.href.replace("http://", "").replace("https://", "").split("/")[0]}/afkwspath`);
    
    ws.onopen = () => {
      console.log("[WS] Connected to websocket.");
      document.getElementById("coinCountdown").innerHTML = "Earning Coins...";
      ws.send(JSON.stringify({ type: "ping" }));
    };

    ws.onmessage = (msg) => {
      let z = JSON.parse(msg.data);
      if (z.type === "count") {
        document.getElementById("coinCountdown").innerHTML = `${z.amount} seconds`;
        afkTime++;
        const hours = Math.floor(afkTime / 3600);
        const minutes = Math.floor((afkTime % 3600) / 60);
        const seconds = afkTime % 60;
        document.getElementById("afkTime").innerHTML = `${hours} hours, ${minutes} minutes, and ${seconds} seconds`;
      } else if (z.type === "coin") {
        session++;
        document.getElementById("sessionEarn").innerHTML = `${session} coins`;
      }
    };

    ws.onerror = (err) => {
      console.error("[WS] Error connecting to websocket.", err);
      reconnect();
    };

    ws.onclose = () => {
      reconnect();
    };
  }

  function reconnect() {
    document.getElementById("coinCountdown").innerHTML = "Reconnecting...";
    document.getElementById("sessionEarn").innerHTML = "Reconnecting...";
    setTimeout(connect, 750);
  }

  connect();
</script>

<style>
  body {
    margin: 0;
    overflow: hidden;
  }
  canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
  .animated-text {
    font-size: 2rem;
    font-weight: bold;
    color: white;
    text-align: center;
    animation: fadeInOut 3s infinite;
  }
  @keyframes fadeInOut {
    0% { opacity: 0; }
    50% { opacity: 1; }
    100% { opacity: 0; }
  }
</style>

<canvas id="background"></canvas>
<script>
  const canvas = document.getElementById("background");
  const ctx = canvas.getContext("2d");
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  let particlesArray = [];
  const numParticles = 100;

  class Particle {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.size = Math.random() * 3 + 1;
      this.speedX = Math.random() * 3 - 1.5;
      this.speedY = Math.random() * 3 - 1.5;
    }

    update() {
      this.x += this.speedX;
      this.y += this.speedY;

      if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
      if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
    }

    draw() {
      ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fill();
    }
  }

  function initParticles() {
    particlesArray = [];
    for (let i = 0; i < numParticles; i++) {
      particlesArray.push(new Particle());
    }
  }

  function animateParticles() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    particlesArray.forEach(p => {
      p.update();
      p.draw();
    });
    requestAnimationFrame(animateParticles);
  }

  initParticles();
  animateParticles();
</script>

<body class="bg-[#10181e]" style="font-family: 'Space Grotesk', sans-serif;">
  <%- include('./components/wrapper') %>
  <!-- Main Content -->
  <main class="flex-grow container mx-auto px-4 py-8">
    <div class="flex justify-between items-center w-full mx-auto pb-4">
      <div class="flex flex-col">
        <h1 class="text-xl text-white font-semibold mb-0.5" style="font-family: 'Cabin';">AFK Page</h1>
        <p class="text-gray-400 text-md">Earn free rewards for keeping this page open.</p>
      </div>
    </div>
    <div class="mt-24 flex justify-center">
      <div class="text-center">
        <h2 class="text-2xl text-white font-bold mb-4">AFK Page</h2>
        <p class="text-gray-400 mb-6">Earn Coins for free, by leaving this page open.</p>
        <div class="animated-text">Stay AFK & Earn Rewards!</div>
        <div class="flex justify-between mb-6">
          <button type="button" class="bg-orange-600 text-sm font-medium text-white px-4 py-2 rounded-full hover:bg-orange-700 transition"><span id="coinCountdown"></span></button>
          <button type="button" class="text-sm font-medium bg-gray-200 text-gray-700 px-4 py-2 rounded-full transition hover:bg-gray-300"><span id="sessionEarn">0</span> Coin / Per Second</button>
        </div>
      </div>
    </div>
  </main>
</body>
