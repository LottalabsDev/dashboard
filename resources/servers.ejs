<body class="bg-[#10181e] relative overflow-hidden" style="font-family: 'Space Grotesk', sans-serif;">
    <canvas id="starCanvas" class="absolute inset-0 -z-10"></canvas>
    
    <%- include('./components/wrapper') %>
    <main class="flex-grow container mx-auto px-4 py-8">
        <div class="flex justify-between items-center w-full pb-4">
            <div class="flex flex-col">
                <h1 class="text-2xl text-white font-semibold" style="font-family: 'Cabin';">Servers</h1>
                <p class="text-gray-400 text-md">Manage and monitor your servers efficiently.</p>
            </div>
            <nav class="inline-flex py-2 px-4 rounded-xl bg-white/5 transition-all">
                <ol class="flex items-center space-x-2">
                    <li>
                        <a href="/" class="text-sm flex items-center text-zinc-400 hover:text-zinc-200">
                            <svg class="size-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M5 12l-2 0l9 -9l9 9l-2 0"></path><path d="M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7"></path></svg>
                            <span>Home</span>
                        </a>
                    </li>
                    <li class="text-white">/ Servers</li>
                </ol>
            </nav>
        </div>

        <div class="flex justify-end mb-4">
            <a href="/create-server" class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg text-sm font-semibold shadow-md transition-transform transform hover:scale-105">New Server</a>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (servers.length === 0) { %>
                <p class="text-gray-400 text-sm col-span-full">No active servers.</p>
            <% } else { %>
                <% for (let server of servers) { %>
                    <div class="bg-white/10 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1 border border-white/15 backdrop-blur-md">
                        <h4 class="text-lg font-semibold text-white mb-1 flex items-center gap-2">
                            <span><%= server.Name %></span>
                            <span class="text-xs px-2 py-1 rounded-full <%= server.Status === 'Running' ? 'bg-green-500 text-white' : 'bg-red-500 text-white' %>"><%= server.Status %></span>
                        </h4>
                        <p class="text-gray-300 text-sm">Status: <span class="<%= server.Status === 'Running' ? 'text-green-400' : 'text-red-400' %>"><%= server.Status %></span></p>
                        <div class="flex flex-wrap gap-2 mt-2">
                            <span class="px-2 py-1 text-xs bg-white/10 text-gray-100 rounded"><%= server.Memory %> MB RAM</span>
                            <span class="px-2 py-1 text-xs bg-white/10 text-gray-100 rounded"><%= server.Cpu %> CPU</span>
                            <span class="px-2 py-1 text-xs bg-white/10 text-gray-100 rounded">Disk: <%= server.Disk %> GB</span>
                        </div>
                        <div class="flex gap-2 mt-4">
                            <a href="<%= panel %>/instance/<%= server.Id %>" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg shadow-md transition-transform transform hover:scale-105">View</a>
                            <a href="/delete?id=<%= server.Id %>" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg shadow-md transition-transform transform hover:scale-105">Delete</a>
                        </div>
                    </div>
                <% } %>
            <% } %>
        </div>
    </main>
    <%- include('./components/footer') %>

    <script>
        const canvas = document.getElementById('starCanvas');
        const ctx = canvas.getContext('2d');
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        
        const stars = Array.from({ length: 300 }, () => ({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            radius: Math.random() * 3,
            speedY: Math.random() * 1.5 + 0.2,
            speedX: Math.random() * 0.5 - 0.25,
            opacity: Math.random() * 0.5 + 0.5
        }));
        
        function animateStars() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const gradient = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 100, canvas.width / 2, canvas.height / 2, canvas.width);
            gradient.addColorStop(0, '#0b0f1a');
            gradient.addColorStop(1, '#10181e');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            stars.forEach(star => {
                ctx.globalAlpha = star.opacity;
                ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
                ctx.fill();
                
                star.y += star.speedY;
                star.x += star.speedX;
                if (star.y > canvas.height) star.y = 0;
                if (star.x > canvas.width || star.x < 0) star.x = Math.random() * canvas.width;
            });
            requestAnimationFrame(animateStars);
        }
        animateStars();
        window.addEventListener('resize', resizeCanvas);
    </script>
</body>
